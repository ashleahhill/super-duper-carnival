

@mixin conditional-flex () {
  display: flex;
  flex-wrap: wrap;

  &--column {
    flex-direction: column;
  }
  &--row {
    flex-direction: row;
  }
}

@mixin position-setup () {
  position: absolute;
  top: 50%;
  left: 50%;
  display: block;
}

@mixin square($element-size) {
  height: $element-size;
  width: $element-size;
}

@mixin position-by-degree ($degrees, $element-size, $diameter) {
  $degrees: $degrees * -1;
  $radius: $diameter/2;
  transform: rotate($degrees) translate($radius) rotate($degrees * -1);
  margin: $element-size/-2;
}

/**
 * Mixin to make a 3d text shadow
 *
 * @param {number=7} length Length of shadow
 * @param {boolean=false} stroke the width and color of a stroke, if desired
 * @param {color=orange} color of the shadow
 */
@mixin three-d-shadow ($length: 7, $stroke: false, $shadow: #ccc) {
  $stroke-color: black;
  $stroke-length: 1px;
  $all: ();
  @if $stroke {
    $stroke-color: nth($stroke, 2);
    $stroke-length: nth($stroke, 1);
    // Several google fonts have a double stroke effect, falling back on text shadow for top stroke
    $all: ($stroke-length $stroke-length $stroke-color) ($stroke-length * -1 $stroke-length * -1 $stroke-color) ($stroke-length * -1 $stroke-length $stroke-color) ($stroke-length $stroke-length * -1 $stroke-color);
  }
  @for $i from 1 through $length {
    $all: append($all, $i * 1px $i * 1px 0 $shadow, comma);
  }
  &::before {
    position: relative;
    content: attr(data-text);
    text-shadow: $all;
  }
  @if $stroke {
    &::after {
      z-index: -1;
      content: attr(data-text);
      position: absolute;
      top: $length * 1px;
      left: $length * 1px;
      text-shadow: none;
      -webkit-text-stroke: $stroke-length * 2 $stroke-color;
    }
  }
}


/**
 * Mixin to put items on a circle
 * @author Hugo Giraudel
 * http://hugogiraudel.com/2013/04/02/items-on-circle/
 *
 * [1] - Allows children to be absolutely positioned
 * [2] - Allows the mixin to be used on a list
 * [3] - In case box-sizing: border-box has been enabled
 * [4] - Allows any type of direct children to be targeted

 * @param {Integer} $nb-items - Number or items
 * @param {Length} $circle-size - Container size
 * @param {Length} $item-size - Item size
 * @param {String | false} $class-for-IE - Base class name for old IE
 */

@mixin distribute-on-circle( $nb-items, $circle-size, $item-size, $class-for-IE: false) {
  $half-item: ($item-size / 2);
  $half-parent: ($circle-size / 2);
  position: relative;

  /* 1 */
  width: $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  /* 2 */
  box-sizing: content-box;

  /* 3 */
  > * {
    /* 4 */
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -$half-item;
  }
  $angle: (360 / $nb-items);
  $rot: 270;

  @for $i from 1 through $nb-items {
    @if not $class-for-IE {
      > :nth-of-type(#{$i}) {
        transform: rotate($rot * 1deg) translate($half-parent) rotate($rot * -1deg);
      }
    }

    @else {
      > .#{$class-for-IE}#{$i} {
        // If CSS transforms are not supported
        $mt: sin($rot * pi() / 180) * $half-parent - $half-item;
        $ml: cos($rot * pi() / 180) * $half-parent - $half-item;
        margin: $mt 0 0 $ml;
      }
    }
    $rot: ($rot + $angle);
  }
}
